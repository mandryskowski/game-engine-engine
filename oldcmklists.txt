cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)

set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING "" FORCE)

project(game-engine-engine C CXX)

################################################################################
# Set target arch type if empty. Visual studio solution generator provides it.
################################################################################
if(NOT CMAKE_VS_PLATFORM_NAME)
    set(CMAKE_VS_PLATFORM_NAME "x64")
endif()
message("${CMAKE_VS_PLATFORM_NAME} architecture in use")

if(NOT ("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64"
     OR "${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86"))
    message(FATAL_ERROR "${CMAKE_VS_PLATFORM_NAME} arch is not supported!")
endif()

################################################################################
# Global configuration types
################################################################################
set(CMAKE_CONFIGURATION_TYPES
    "Debug"
    "LibraryDebug"
    "LibraryRelease"
    "Release"
    CACHE STRING "" FORCE
)

################################################################################
# Global compiler options
################################################################################
if(MSVC)
    # remove default flags provided with CMake for MSVC
    set(CMAKE_C_FLAGS "")
    set(CMAKE_C_FLAGS_DEBUG "")
    set(CMAKE_C_FLAGS_LIBRARYDEBUG "")
    set(CMAKE_C_FLAGS_LIBRARYRELEASE "")
    set(CMAKE_C_FLAGS_RELEASE "")
    set(CMAKE_CXX_FLAGS "")
    set(CMAKE_CXX_FLAGS_DEBUG "")
    set(CMAKE_CXX_FLAGS_LIBRARYDEBUG "")
    set(CMAKE_CXX_FLAGS_LIBRARYRELEASE "")
    set(CMAKE_CXX_FLAGS_RELEASE "")
endif()

################################################################################
# Global linker options
################################################################################
if(MSVC)
    # remove default flags provided with CMake for MSVC
    set(CMAKE_EXE_LINKER_FLAGS "")
    set(CMAKE_MODULE_LINKER_FLAGS "")
    set(CMAKE_SHARED_LINKER_FLAGS "")
    set(CMAKE_STATIC_LINKER_FLAGS "")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_LIBRARYDEBUG "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_LIBRARYDEBUG "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_LIBRARYDEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_LIBRARYDEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_LIBRARYRELEASE "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_LIBRARYRELEASE "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_LIBRARYRELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_LIBRARYRELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
endif()

################################################################################
# Nuget packages function stub.
################################################################################
function(use_package TARGET PACKAGE VERSION)
    message(WARNING "No implementation of use_package. Create yours. "
                    "Package \"${PACKAGE}\" with version \"${VERSION}\" "
                    "for target \"${TARGET}\" is ignored!")
endfunction()

################################################################################
# Common utils
################################################################################
include(CMake/Utils.cmake)

################################################################################
# Additional Global Settings(add specific info there)
################################################################################
include(CMake/GlobalSettingsInclude.cmake OPTIONAL)

################################################################################
# Use solution folders feature
################################################################################
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

################################################################################
# Sub-projects
################################################################################
add_subdirectory(../rehab-game ${CMAKE_BINARY_DIR}/rehab-game)
add_subdirectory(Projects/example_8_ball_pool/example_8_ball_pool)



























set(PROJECT_NAME game-engine-engine)

################################################################################
# Source groups
################################################################################
set(Header_Files
    "src/src/animation/Animation.h"
    "src/src/animation/AnimationManagerComponent.h"
    "src/src/animation/SkeletonInfo.h"
    "src/src/assetload/FileLoader.h"
    "src/src/audio/AudioEngine.h"
    "src/src/audio/AudioFile.h"
    "src/src/editor/DefaultEditorController.h"
    "src/src/editor/EditorActions.h"
    "src/src/editor/EditorManager.h"
    "src/src/editor/EditorMessageLogger.h"
    "src/src/editor/EditorRenderer.h"
    "src/src/editor/FPSCounter.h"
    "src/src/editor/GameEngineEngineEditor.h"
    "src/src/editor/GEditorSettings.h"
    "src/src/editor/GEditorToolbox.h"
    "src/src/editor/GraphRenderingComponent.h"
    "src/src/editor/MousePicking.h"
    "src/src/editor/UIViewportWindow.h"
    "src/src/game/Game.h"
    "src/src/game/GameManager.h"
    "src/src/game/GameScene.h"
    "src/src/game/GameSettings.h"
    "src/src/game/IDSystem.h"
    "src/src/input/Event.h"
    "src/src/input/InputDevicesStateRetriever.h"
    "src/src/math/Box.h"
    "src/src/math/Transform.h"
    "src/src/math/Vec.h"
    "src/src/physics/CollisionObject.h"
    "src/src/physics/DynamicPhysicsObjects.h"
    "src/src/physics/PhysicsEngine.h"
    "src/src/physics/PhysicsObjects.h"
    "src/src/rendering/Framebuffer.h"
    "src/src/rendering/LightProbe.h"
    "src/src/rendering/Material.h"
    "src/src/rendering/Mesh.h"
    "src/src/rendering/OutlineRenderer.h"
    "src/src/rendering/Postprocess.h"
    "src/src/rendering/RenderableVolume.h"
    "src/src/rendering/RenderEngine.h"
    "src/src/rendering/Renderer.h"
    "src/src/rendering/RenderInfo.h"
    "src/src/rendering/RenderToolbox.h"
    "src/src/rendering/Shader.h"
    "src/src/rendering/Texture.h"
    "src/src/rendering/Viewport.h"
    "src/src/scene/Actor.h"
    "src/src/scene/BoneComponent.h"
    "src/src/scene/CameraComponent.h"
    "src/src/scene/Component.h"
    "src/src/scene/Controller.h"
    "src/src/scene/GunActor.h"
    "src/src/scene/hierarchy/HierarchyNode.h"
    "src/src/scene/hierarchy/HierarchyNodeBase.h"
    "src/src/scene/hierarchy/HierarchyNodeInstantiation.h"
    "src/src/scene/hierarchy/HierarchyTree.h"
    "src/src/scene/LightComponent.h"
    "src/src/scene/LightProbeComponent.h"
    "src/src/scene/ModelComponent.h"
    "src/src/scene/PawnActor.h"
    "src/src/scene/RenderableComponent.h"
    "src/src/scene/SoundSourceComponent.h"
    "src/src/scene/TextComponent.h"
    "src/src/scene/UIButtonActor.h"
    "src/src/scene/UIInputBoxActor.h"
    "src/src/scene/UIListElement.h"
    "src/src/scene/UIWindowActor.h"
    "src/src/UI/Font.h"
    "src/src/UI/UIActor.h"
    "src/src/UI/UICanvas.h"
    "src/src/UI/UICanvasActor.h"
    "src/src/UI/UICanvasField.h"
    "src/src/UI/UIComponent.h"
    "src/src/UI/UIElement.h"
    "src/src/UI/UIListActor.h"
    "src/src/utility/Alignment.h"
    "src/src/utility/Asserts.h"
    "src/src/utility/Log.h"
    "src/src/utility/OperatingSystem.h"
    "src/src/utility/Profiling.h"
    "src/src/utility/Utility.h"
)
source_group("Header Files" FILES ${Header_Files})

set(Source_Files
    "src/src/animation/Animation.cpp"
    "src/src/animation/AnimationManagerComponent.cpp"
    "src/src/animation/SkeletonInfo.cpp"
    "src/src/assetload/FileLoader.cpp"
    "src/src/audio/AudioEngine.cpp"
    "src/src/editor/DefaultEditorController.cpp"
    "src/src/editor/EditorActions.cpp"
    "src/src/editor/EditorManager.cpp"
    "src/src/editor/EditorMessageLogger.cpp"
    "src/src/editor/EditorRenderer.cpp"
    "src/src/editor/GameEngineEngineEditor.cpp"
    "src/src/editor/GEditorSettings.cpp"
    "src/src/editor/GEditorToolbox.cpp"
    "src/src/editor/GraphRenderingComponent.cpp"
    "src/src/editor/MousePicking.cpp"
    "src/src/game/Game.cpp"
    "src/src/game/GameManager.cpp"
    "src/src/game/GameScene.cpp"
    "src/src/game/GameSettings.cpp"
    "src/src/input/Event.cpp"
    "src/src/input/InputDevicesStateRetriever.cpp"
    "src/src/main.cpp"
    "src/src/math/Box.cpp"
    "src/src/math/Transform.cpp"
    "src/src/math/Vec.cpp"
    "src/src/physics/CollisionObject.cpp"
    "src/src/physics/DynamicPhysicsObjects.cpp"
    "src/src/physics/PhysicsEngine.cpp"
    "src/src/physics/PhysicsObjects.cpp"
    "src/src/rendering/Framebuffer.cpp"
    "src/src/rendering/LightProbe.cpp"
    "src/src/rendering/Material.cpp"
    "src/src/rendering/Mesh.cpp"
    "src/src/rendering/Postprocess.cpp"
    "src/src/rendering/RenderableVolume.cpp"
    "src/src/rendering/RenderEngine.cpp"
    "src/src/rendering/Renderer.cpp"
    "src/src/rendering/RenderInfo.cpp"
    "src/src/rendering/RenderToolbox.cpp"
    "src/src/rendering/Shader.cpp"
    "src/src/rendering/Texture.cpp"
    "src/src/rendering/Viewport.cpp"
    "src/src/scene/Actor.cpp"
    "src/src/scene/BoneComponent.cpp"
    "src/src/scene/CameraComponent.cpp"
    "src/src/scene/Component.cpp"
    "src/src/scene/Controller.cpp"
    "src/src/scene/GunActor.cpp"
    "src/src/scene/hierarchy/HierarchyNode.cpp"
    "src/src/scene/hierarchy/HierarchyNodeInstantiation.cpp"
    "src/src/scene/hierarchy/HierarchyTree.cpp"
    "src/src/scene/LightComponent.cpp"
    "src/src/scene/LightProbeComponent.cpp"
    "src/src/scene/ModelComponent.cpp"
    "src/src/scene/PawnActor.cpp"
    "src/src/scene/RenderableComponent.cpp"
    "src/src/scene/SoundSourceComponent.cpp"
    "src/src/scene/TextComponent.cpp"
    "src/src/scene/UIButtonActor.cpp"
    "src/src/scene/UIInputBoxActor.cpp"
    "src/src/scene/UIListElement.cpp"
    "src/src/scene/UIWindowActor.cpp"
    "src/src/UI/Font.cpp"
    "src/src/UI/UIActor.cpp"
    "src/src/UI/UICanvas.cpp"
    "src/src/UI/UICanvasActor.cpp"
    "src/src/UI/UICanvasField.cpp"
    "src/src/UI/UIComponent.cpp"
    "src/src/UI/UIElement.cpp"
    "src/src/UI/UIListActor.cpp"
    "src/src/utility/Alignment.cpp"
    "src/src/utility/Profiling.cpp"
    "src/src/utility/Utility.cpp"
    "src/vendor/source/glad/glad.c"
    "src/vendor/source/tinyfiledialogs/tinyfiledialogs.c"
    "src/vendor/source/whereami/whereami.c"
)
source_group("Source Files" FILES ${Source_Files})

set(ALL_FILES
    ${Header_Files}
    ${Source_Files}
)

################################################################################
# Target
################################################################################
add_executable(${PROJECT_NAME} ${ALL_FILES})

use_props(${PROJECT_NAME} "${CMAKE_CONFIGURATION_TYPES}" "${DEFAULT_CXX_PROPS}")
set_target_properties(${PROJECT_NAME} PROPERTIES
    VS_GLOBAL_KEYWORD "ManagedCProj"
)
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        COMMON_LANGUAGE_RUNTIME                "No"
    )
endif()
################################################################################
# Target name
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        TARGET_NAME_LIBRARYDEBUG   "${PROJECT_NAME}-d"
    )
endif()
################################################################################
# Output directory
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        OUTPUT_DIRECTORY_LIBRARYDEBUG   "${CMAKE_SOURCE_DIR}/src/lib/GEE/"
        OUTPUT_DIRECTORY_LIBRARYRELEASE "${CMAKE_SOURCE_DIR}/src/lib/GEE/"
        OUTPUT_DIRECTORY_RELEASE        "${CMAKE_SOURCE_DIR}/"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        OUTPUT_DIRECTORY_DEBUG          "${CMAKE_CURRENT_SOURCE_DIR}/"
        OUTPUT_DIRECTORY_LIBRARYDEBUG   "${CMAKE_SOURCE_DIR}/src/lib/GEE/debug/"
        OUTPUT_DIRECTORY_LIBRARYRELEASE "${CMAKE_SOURCE_DIR}/src/lib/GEE/"
        OUTPUT_DIRECTORY_RELEASE        "${CMAKE_SOURCE_DIR}/"
    )
endif()
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    set_target_properties(${PROJECT_NAME} PROPERTIES
        INTERPROCEDURAL_OPTIMIZATION_LIBRARYRELEASE "FALSE"
        INTERPROCEDURAL_OPTIMIZATION_RELEASE        "FALSE"
    )
endif()
################################################################################
# MSVC runtime library
################################################################################
get_property(MSVC_RUNTIME_LIBRARY_DEFAULT TARGET ${PROJECT_NAME} PROPERTY MSVC_RUNTIME_LIBRARY)
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    string(CONCAT "MSVC_RUNTIME_LIBRARY_STR"
        $<$<CONFIG:Debug>:
            MultiThreadedDebug
        >
        $<$<CONFIG:LibraryDebug>:
            MultiThreadedDebug
        >
        $<$<CONFIG:LibraryRelease>:
            MultiThreaded
        >
        $<$<CONFIG:Release>:
            MultiThreaded
        >
        $<$<NOT:$<OR:$<CONFIG:Debug>,$<CONFIG:LibraryDebug>,$<CONFIG:LibraryRelease>,$<CONFIG:Release>>>:${MSVC_RUNTIME_LIBRARY_DEFAULT}>
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    string(CONCAT "MSVC_RUNTIME_LIBRARY_STR"
        $<$<CONFIG:Debug>:
            MultiThreadedDebug
        >
        $<$<CONFIG:LibraryDebug>:
            MultiThreadedDebug
        >
        $<$<CONFIG:LibraryRelease>:
            MultiThreaded
        >
        $<$<CONFIG:Release>:
            MultiThreaded
        >
        $<$<NOT:$<OR:$<CONFIG:Debug>,$<CONFIG:LibraryDebug>,$<CONFIG:LibraryRelease>,$<CONFIG:Release>>>:${MSVC_RUNTIME_LIBRARY_DEFAULT}>
    )
endif()
set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY ${MSVC_RUNTIME_LIBRARY_STR})

################################################################################
# Compile definitions
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        "$<$<CONFIG:Debug>:"
            "_DEBUG"
        ">"
        "$<$<CONFIG:LibraryDebug>:"
            "_DEBUG"
        ">"
        "$<$<CONFIG:LibraryRelease>:"
            "NDEBUG"
        ">"
        "$<$<CONFIG:Release>:"
            "NDEBUG"
        ">"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    target_compile_definitions(${PROJECT_NAME} PRIVATE
        "$<$<CONFIG:Debug>:"
            "_DEBUG"
        ">"
        "$<$<CONFIG:LibraryDebug>:"
            "_DEBUG"
        ">"
        "$<$<CONFIG:LibraryRelease>:"
            "NDEBUG"
        ">"
        "$<$<CONFIG:Release>:"
            "NDEBUG"
        ">"
        "WIN32;"
        "_WINDOWS"
    )
endif()

################################################################################
# Compile and link options
################################################################################
if(MSVC)
    if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
        target_compile_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /MP;
                /bigobj
            >
            $<$<CONFIG:LibraryDebug>:
                /MP;
                /bigobj
            >
            $<$<CONFIG:Release>:
                /MP
            >
            /std:c++17;
            ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT};
            ${DEFAULT_CXX_EXCEPTION_HANDLING}
        )
    elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
        target_compile_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /Od
            >
            $<$<CONFIG:LibraryDebug>:
                /Od;
                /W3
            >
            $<$<CONFIG:LibraryRelease>:
                /W1
            >
            $<$<CONFIG:Release>:
                /W1
            >
            /MP;
            /std:c++17;
            /Zi;
            ${DEFAULT_CXX_EXCEPTION_HANDLING}
        )
    endif()
    if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
        target_link_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /DEBUG:FULL
            >
            $<$<CONFIG:Release>:
                /DEBUG:FULL
            >
        )
    elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
        target_link_options(${PROJECT_NAME} PRIVATE
            $<$<CONFIG:Debug>:
                /DEBUG;
                /INCREMENTAL
            >
            $<$<CONFIG:LibraryRelease>:
                /OPT:REF;
                /OPT:ICF
            >
            $<$<CONFIG:Release>:
                /DEBUG;
                /OPT:REF;
                /OPT:ICF;
                /INCREMENTAL
            >
            /MACHINE:X86;
            /SUBSYSTEM:CONSOLE
        )
    endif()
endif()

################################################################################
# Dependencies
################################################################################
if("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64")
    set(ADDITIONAL_LIBRARY_DEPENDENCIES
        "$<$<CONFIG:Debug>:"
            "x64/glfw/debug/glfw3;"
            "x64/OpenAL/debug/OpenAL64;"
            "x64/PhysX/debug/PhysX_64;"
            "x64/PhysX/debug/PhysXCommon_64;"
            "x64/PhysX/debug/PhysXFoundation_64;"
            "x64/PhysX/debug/PhysXPvdSDK_static_64;"
            "x64/PhysX/debug/PhysXExtensions_static_64;"
            "x64/PhysX/debug/PhysXCharacterKinematic_static_64;"
            "x64/PhysX/debug/PhysXCooking_64;"
            "x64/assimp/debug/assimp-vc143-mtd;"
            "x64/freetype/debug/freetyped"
        ">"
        "$<$<CONFIG:LibraryDebug>:"
            "x64/glfw/debug/glfw3;"
            "x64/OpenAL/debug/OpenAL64;"
            "x64/PhysX/debug/PhysX_64;"
            "x64/PhysX/debug/PhysXCommon_64;"
            "x64/PhysX/debug/PhysXFoundation_64;"
            "x64/PhysX/debug/PhysXPvdSDK_static_64;"
            "x64/PhysX/debug/PhysXExtensions_static_64;"
            "x64/PhysX/debug/PhysXCharacterKinematic_static_64;"
            "x64/PhysX/debug/PhysXCooking_64;"
            "x64/assimp/debug/assimp-vc143-mtd;"
            "x64/freetype/debug/freetyped"
        ">"
        "$<$<CONFIG:LibraryRelease>:"
            "x64/glfw/glfw3;"
            "x64/OpenAL/OpenAL64;"
            "x64/PhysX/checked/PhysX_64;"
            "x64/PhysX/checked/PhysXCommon_64;"
            "x64/PhysX/checked/PhysXFoundation_64;"
            "x64/PhysX/checked/PhysXPvdSDK_static_64;"
            "x64/PhysX/checked/PhysXExtensions_static_64;"
            "x64/PhysX/checked/PhysXCharacterKinematic_static_64;"
            "x64/PhysX/checked/PhysXCooking_64;"
            "x64/assimp/assimp-vc143-mt;"
            "x64/freetype/freetype"
        ">"
        "$<$<CONFIG:Release>:"
            "x64/glfw/glfw3;"
            "x64/OpenAL/OpenAL64;"
            "x64/PhysX/checked/PhysX_64;"
            "x64/PhysX/checked/PhysXCommon_64;"
            "x64/PhysX/checked/PhysXFoundation_64;"
            "x64/PhysX/checked/PhysXPvdSDK_static_64;"
            "x64/PhysX/checked/PhysXExtensions_static_64;"
            "x64/PhysX/checked/PhysXCharacterKinematic_static_64;"
            "x64/PhysX/checked/PhysXCooking_64;"
            "x64/assimp/assimp-vc143-mt;"
            "x64/freetype/freetype"
        ">"
        "opengl32"
    )
elseif("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x86")
    set(ADDITIONAL_LIBRARY_DEPENDENCIES
        "$<$<CONFIG:Debug>:"
            "glfw32/glfw3_32;"
            "AL32/debug/OpenAL32;"
            "PhysX32/debug/PhysX_32;"
            "PhysX32/debug/PhysXCommon_32;"
            "PhysX32/debug/PhysXFoundation_32;"
            "PhysX32/debug/PhysXPvdSDK_static_32;"
            "PhysX32/debug/PhysXExtensions_static_32;"
            "PhysX32/debug/PhysXCharacterKinematic_static_32;"
            "PhysX32/debug/PhysXCooking_32;"
            "assimp/assimp-vc142-mt;"
            "freetype32/freetype"
        ">"
        "$<$<CONFIG:LibraryDebug>:"
            "glfw32/glfw3_32;"
            "AL32/debug/OpenAL32;"
            "PhysX32/debug/PhysX_32;"
            "PhysX32/debug/PhysXCommon_32;"
            "PhysX32/debug/PhysXFoundation_32;"
            "PhysX32/debug/PhysXPvdSDK_static_32;"
            "PhysX32/debug/PhysXExtensions_static_32;"
            "PhysX32/debug/PhysXCharacterKinematic_static_32;"
            "PhysX32/debug/PhysXCooking_32;"
            "assimp/assimp-vc142-mt;"
            "freetype32/freetype"
        ">"
        "$<$<CONFIG:LibraryRelease>:"
            "glfw32/glfw3_32;"
            "AL32/OpenAL32;"
            "PhysX32/PhysX_32;"
            "PhysX32/PhysXCommon_32;"
            "PhysX32/PhysXFoundation_32;"
            "PhysX32/PhysXPvdSDK_static_32;"
            "PhysX32/PhysXExtensions_static_32;"
            "PhysX32/PhysXCharacterKinematic_static_32;"
            "PhysX32/PhysXCooking_32;"
            "assimp/assimp-vc142-mt;"
            "freetype32/freetype"
        ">"
        "$<$<CONFIG:Release>:"
            "x86/glfw/glfw3;"
            "x86/OpenAL/OpenAL32;"
            "x86/PhysX/checked/PhysX_32;"
            "x86/PhysX/checked/PhysXCommon_32;"
            "x86/PhysX/checked/PhysXFoundation_32;"
            "x86/PhysX/checked/PhysXPvdSDK_static_32;"
            "x86/PhysX/checked/PhysXExtensions_static_32;"
            "x86/PhysX/checked/PhysXCharacterKinematic_static_32;"
            "x86/PhysX/checked/PhysXCooking_32;"
            "x86/assimp/assimp-vc143-mt;"
            "x86/freetype/freetype"
        ">"
        "opengl32"
    )
endif()
target_link_libraries(${PROJECT_NAME} PRIVATE "${ADDITIONAL_LIBRARY_DEPENDENCIES}")

